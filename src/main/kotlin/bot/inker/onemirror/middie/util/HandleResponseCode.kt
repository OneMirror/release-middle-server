package bot.inker.onemirror.middie.util

import io.undertow.server.HttpHandler
import io.undertow.server.HttpServerExchange
import io.undertow.util.StatusCodes.*
import java.nio.ByteBuffer

@Suppress("unused")
object HandleResponseCode {
    val STATUS_CONTINUE:HttpHandler = Handler(CONTINUE, CONTINUE_STRING)
    val STATUS_SWITCHING_PROTOCOLS:HttpHandler = Handler(SWITCHING_PROTOCOLS, SWITCHING_PROTOCOLS_STRING)
    val STATUS_PROCESSING:HttpHandler = Handler(PROCESSING, PROCESSING_STRING)
    val STATUS_OK:HttpHandler = Handler(OK, OK_STRING)
    val STATUS_CREATED:HttpHandler = Handler(CREATED, CREATED_STRING)
    val STATUS_ACCEPTED:HttpHandler = Handler(ACCEPTED, ACCEPTED_STRING)
    val STATUS_NON_AUTHORITATIVE_INFORMATION:HttpHandler = Handler(NON_AUTHORITATIVE_INFORMATION, NON_AUTHORITATIVE_INFORMATION_STRING)
    val STATUS_NO_CONTENT:HttpHandler = Handler(NO_CONTENT)
    val STATUS_RESET_CONTENT:HttpHandler = Handler(RESET_CONTENT, RESET_CONTENT_STRING)
    val STATUS_PARTIAL_CONTENT:HttpHandler = Handler(PARTIAL_CONTENT, PARTIAL_CONTENT_STRING)
    val STATUS_MULTI_STATUS:HttpHandler = Handler(MULTI_STATUS, MULTI_STATUS_STRING)
    val STATUS_ALREADY_REPORTED:HttpHandler = Handler(ALREADY_REPORTED, ALREADY_REPORTED_STRING)
    val STATUS_IM_USED:HttpHandler = Handler(IM_USED, IM_USED_STRING)
    val STATUS_MULTIPLE_CHOICES:HttpHandler = Handler(MULTIPLE_CHOICES, MULTIPLE_CHOICES_STRING)
    val STATUS_MOVED_PERMANENTLY:HttpHandler = Handler(MOVED_PERMANENTLY, MOVED_PERMANENTLY_STRING)
    val STATUS_FOUND:HttpHandler = Handler(FOUND, FOUND_STRING)
    val STATUS_SEE_OTHER:HttpHandler = Handler(SEE_OTHER, SEE_OTHER_STRING)
    val STATUS_NOT_MODIFIED:HttpHandler = Handler(NOT_MODIFIED, NOT_MODIFIED_STRING)
    val STATUS_USE_PROXY:HttpHandler = Handler(USE_PROXY, USE_PROXY_STRING)
    val STATUS_TEMPORARY_REDIRECT:HttpHandler = Handler(TEMPORARY_REDIRECT, TEMPORARY_REDIRECT_STRING)
    val STATUS_PERMANENT_REDIRECT:HttpHandler = Handler(PERMANENT_REDIRECT, PERMANENT_REDIRECT_STRING)
    val STATUS_BAD_REQUEST:HttpHandler = Handler(BAD_REQUEST, BAD_REQUEST_STRING)
    val STATUS_UNAUTHORIZED:HttpHandler = Handler(UNAUTHORIZED, UNAUTHORIZED_STRING)
    val STATUS_PAYMENT_REQUIRED:HttpHandler = Handler(PAYMENT_REQUIRED, PAYMENT_REQUIRED_STRING)
    val STATUS_FORBIDDEN:HttpHandler = Handler(FORBIDDEN, FORBIDDEN_STRING)
    val STATUS_NOT_FOUND:HttpHandler = Handler(NOT_FOUND, NOT_FOUND_STRING)
    val STATUS_METHOD_NOT_ALLOWED:HttpHandler = Handler(METHOD_NOT_ALLOWED, METHOD_NOT_ALLOWED_STRING)
    val STATUS_NOT_ACCEPTABLE:HttpHandler = Handler(NOT_ACCEPTABLE, NOT_ACCEPTABLE_STRING)
    val STATUS_PROXY_AUTHENTICATION_REQUIRED:HttpHandler = Handler(PROXY_AUTHENTICATION_REQUIRED, PROXY_AUTHENTICATION_REQUIRED_STRING)
    val STATUS_REQUEST_TIME_OUT:HttpHandler = Handler(REQUEST_TIME_OUT, REQUEST_TIME_OUT_STRING)
    val STATUS_CONFLICT:HttpHandler = Handler(CONFLICT, CONFLICT_STRING)
    val STATUS_GONE:HttpHandler = Handler(GONE, GONE_STRING)
    val STATUS_LENGTH_REQUIRED:HttpHandler = Handler(LENGTH_REQUIRED, LENGTH_REQUIRED_STRING)
    val STATUS_PRECONDITION_FAILED:HttpHandler = Handler(PRECONDITION_FAILED, PRECONDITION_FAILED_STRING)
    val STATUS_REQUEST_ENTITY_TOO_LARGE:HttpHandler = Handler(REQUEST_ENTITY_TOO_LARGE, REQUEST_ENTITY_TOO_LARGE_STRING)
    val STATUS_REQUEST_URI_TOO_LARGE:HttpHandler = Handler(REQUEST_URI_TOO_LARGE, REQUEST_URI_TOO_LARGE_STRING)
    val STATUS_UNSUPPORTED_MEDIA_TYPE:HttpHandler = Handler(UNSUPPORTED_MEDIA_TYPE, UNSUPPORTED_MEDIA_TYPE_STRING)
    val STATUS_REQUEST_RANGE_NOT_SATISFIABLE:HttpHandler = Handler(REQUEST_RANGE_NOT_SATISFIABLE, REQUEST_RANGE_NOT_SATISFIABLE_STRING)
    val STATUS_EXPECTATION_FAILED:HttpHandler = Handler(EXPECTATION_FAILED, EXPECTATION_FAILED_STRING)
    val STATUS_UNPROCESSABLE_ENTITY:HttpHandler = Handler(UNPROCESSABLE_ENTITY, UNPROCESSABLE_ENTITY_STRING)
    val STATUS_LOCKED:HttpHandler = Handler(LOCKED, LOCKED_STRING)
    val STATUS_FAILED_DEPENDENCY:HttpHandler = Handler(FAILED_DEPENDENCY, FAILED_DEPENDENCY_STRING)
    val STATUS_UPGRADE_REQUIRED:HttpHandler = Handler(UPGRADE_REQUIRED, UPGRADE_REQUIRED_STRING)
    val STATUS_PRECONDITION_REQUIRED:HttpHandler = Handler(PRECONDITION_REQUIRED, PRECONDITION_REQUIRED_STRING)
    val STATUS_TOO_MANY_REQUESTS:HttpHandler = Handler(TOO_MANY_REQUESTS, TOO_MANY_REQUESTS_STRING)
    val STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE:HttpHandler = Handler(REQUEST_HEADER_FIELDS_TOO_LARGE, REQUEST_HEADER_FIELDS_TOO_LARGE_STRING)
    val STATUS_INTERNAL_SERVER_ERROR:HttpHandler = Handler(INTERNAL_SERVER_ERROR, INTERNAL_SERVER_ERROR_STRING)
    val STATUS_NOT_IMPLEMENTED:HttpHandler = Handler(NOT_IMPLEMENTED, NOT_IMPLEMENTED_STRING)
    val STATUS_BAD_GATEWAY:HttpHandler = Handler(BAD_GATEWAY, BAD_GATEWAY_STRING)
    val STATUS_SERVICE_UNAVAILABLE:HttpHandler = Handler(SERVICE_UNAVAILABLE, SERVICE_UNAVAILABLE_STRING)
    val STATUS_GATEWAY_TIME_OUT:HttpHandler = Handler(GATEWAY_TIME_OUT, GATEWAY_TIME_OUT_STRING)
    val STATUS_HTTP_VERSION_NOT_SUPPORTED:HttpHandler = Handler(HTTP_VERSION_NOT_SUPPORTED, HTTP_VERSION_NOT_SUPPORTED_STRING)
    val STATUS_INSUFFICIENT_STORAGE:HttpHandler = Handler(INSUFFICIENT_STORAGE, INSUFFICIENT_STORAGE_STRING)
    val STATUS_LOOP_DETECTED:HttpHandler = Handler(LOOP_DETECTED, LOOP_DETECTED_STRING)
    val STATUS_NOT_EXTENDED:HttpHandler = Handler(NOT_EXTENDED, NOT_EXTENDED_STRING)
    val STATUS_NETWORK_AUTHENTICATION_REQUIRED:HttpHandler = Handler(NETWORK_AUTHENTICATION_REQUIRED, NETWORK_AUTHENTICATION_REQUIRED_STRING)

    private class Handler(
        val statusCode:Int,
        val message:ByteBuffer?
    ):HttpHandler{
        constructor(statusCode:Int,message:String?) : this(statusCode, message?.toByteArray()?.let(ByteBuffer::wrap))
        constructor(statusCode:Int):this(statusCode, null as ByteBuffer?)
        override fun handleRequest(exchange: HttpServerExchange) {
            exchange.statusCode = statusCode
            message?.let(exchange.responseSender::send)
            exchange.endExchange()
        }
    }
}